# sys-libs/glibc: different behaviour of LD_PRELOAD and LD_LIBRARY_PATH from error tolerance perspective.
# https://sourceware.org/bugzilla/show_bug.cgi?id=25341

diff --git a/elf/dl-load.c b/elf/dl-load.c
index 8662a863..ef3a598e 100644
--- a/elf/dl-load.c
+++ b/elf/dl-load.c
@@ -1721,44 +1721,62 @@ open_verify (const char *name, int fd,
 		errstring = N_("ELF file data encoding not big-endian");
 	      else
 		errstring = N_("ELF file data encoding not little-endian");
+
+              goto close_and_out;
 	    }
 	  else if (ehdr->e_ident[EI_VERSION] != EV_CURRENT)
-	    errstring
-	      = N_("ELF file version ident does not match current one");
-	  /* XXX We should be able so set system specific versions which are
-	     allowed here.  */
+	    {
+	      errstring
+	        = N_("ELF file version ident does not match current one");
+	      /* XXX We should be able so set system specific versions which are
+	         allowed here.  */
+	      goto close_and_out;
+	    }
 	  else if (!VALID_ELF_OSABI (ehdr->e_ident[EI_OSABI]))
-	    errstring = N_("ELF file OS ABI invalid");
+	    {
+	      errstring = N_("ELF file OS ABI invalid");
+	      goto close_and_out;
+	    }
 	  else if (!VALID_ELF_ABIVERSION (ehdr->e_ident[EI_OSABI],
 					  ehdr->e_ident[EI_ABIVERSION]))
-	    errstring = N_("ELF file ABI version invalid");
+	    {
+	      errstring = N_("ELF file ABI version invalid");
+	      goto close_and_out;
+	    }
 	  else if (memcmp (&ehdr->e_ident[EI_PAD], &expected[EI_PAD],
 			   EI_NIDENT - EI_PAD) != 0)
-	    errstring = N_("nonzero padding in e_ident");
-	  else
+	    {
+	      errstring = N_("nonzero padding in e_ident");
+	      goto close_and_out;
+	    }
+	  else {
 	    /* Otherwise we don't know what went wrong.  */
 	    errstring = N_("internal error");
 
-	  goto lose;
+	    goto lose;
+	  }
 	}
 
       if (__glibc_unlikely (ehdr->e_version != EV_CURRENT))
 	{
 	  errstring = N_("ELF file version does not match current one");
-	  goto lose;
+	  goto close_and_out;
 	}
       if (! __glibc_likely (elf_machine_matches_host (ehdr)))
-	goto close_and_out;
+	{
+	  errstring = N_("ELF machine host mismatch");
+	  goto close_and_out;
+	}
       else if (__glibc_unlikely (ehdr->e_type != ET_DYN
 				 && ehdr->e_type != ET_EXEC))
 	{
 	  errstring = N_("only ET_DYN and ET_EXEC can be loaded");
-	  goto lose;
+	  goto close_and_out;
 	}
       else if (__glibc_unlikely (ehdr->e_phentsize != sizeof (ElfW(Phdr))))
 	{
 	  errstring = N_("ELF file's phentsize not the expected size");
-	  goto lose;
+	  goto close_and_out;
 	}
 
       maplength = ehdr->e_phnum * sizeof (ElfW(Phdr));
